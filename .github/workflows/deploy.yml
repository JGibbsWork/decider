name: Deploy Decider to Mac Mini

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  APP_NAME: decider

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Docker environment
      run: |
        echo "Setting up Docker environment for ${{ github.repository }}..."
        
        # Create Docker config directory
        mkdir -p ~/.docker
        
        # Create config without keychain
        cat > ~/.docker/config.json << 'EOF'
        {
          "auths": {},
          "credsStore": "",
          "credHelpers": {},
          "experimental": "disabled"
        }
        EOF
        
        # Ensure shared network exists
        docker network create gibbs-apps 2>/dev/null || echo "Network already exists"
        
        # Test Docker access
        echo "Testing Docker access..."
        docker --version
        
    - name: Set up deployment directory
      run: |
        DEPLOY_DIR=~/deployments/${{ env.APP_NAME }}
        echo "Cleaning up old deployment..."
        
        # Stop any existing container
        docker stop decider-production 2>/dev/null || true
        docker rm decider-production 2>/dev/null || true
        
        # Clean up directory but preserve logs
        rm -rf $DEPLOY_DIR
        mkdir -p $DEPLOY_DIR
        mkdir -p $DEPLOY_DIR/logs
        
        echo "Copying new code..."
        cp -r $GITHUB_WORKSPACE/* $DEPLOY_DIR/
        
    - name: Copy secrets
      run: |
        DEPLOY_DIR=~/deployments/${{ env.APP_NAME }}
        APP_SECRETS=~/secrets/${{ env.APP_NAME }}
        
        echo "Copying environment file..."
        if [ -f "$APP_SECRETS/production.env" ]; then
          cp $APP_SECRETS/production.env $DEPLOY_DIR/.env
          echo "✅ Environment file copied as .env"
        else
          echo "❌ Environment file not found at $APP_SECRETS/production.env"
          exit 1
        fi
        
    - name: Build and start container
      env:
        DOCKER_CONFIG: ~/.docker
        DOCKER_BUILDKIT: 0
      run: |
        cd ~/deployments/${{ env.APP_NAME }}
        echo "Building Decider..."
        
        # Stop any existing container
        docker stop decider-production 2>/dev/null || true
        docker rm decider-production 2>/dev/null || true
        
        # Build the image
        docker build --no-cache -t decider:latest .
        
        # Run the container with shared network
        docker run -d \
          --name decider-production \
          --restart unless-stopped \
          --network gibbs-apps \
          -p 3005:3005 \
          -v $(pwd)/logs:/usr/src/app/logs:rw \
          --env-file .env \
          -e NODE_ENV=production \
          -e PORT=3005 \
          decider:latest
        
    - name: Verify deployment
      run: |
        echo "Waiting for container to start..."
        sleep 15
        
        echo "Checking container status..."
        docker ps | grep decider-production
        
        echo "Testing health endpoint..."
        if curl -f http://localhost:3005/health; then
          echo "✅ Decider deployment successful!"
        else
          echo "❌ Health check failed"
          echo "Container logs:"
          docker logs decider-production
          exit 1
        fi
        
        echo "Testing status endpoint..."
        curl -s http://localhost:3005/status | jq '.' || curl -s http://localhost:3005/status
        
        echo "Testing network connectivity to other services..."
        if docker exec decider-production ping -c 1 ctaaapi-production 2>/dev/null; then
          echo "✅ Can reach CTAAAPI from Decider!"
        else
          echo "⚠️  Cannot reach CTAAAPI (this may be expected)"
        fi
        
    - name: Clean up old images
      run: |
        docker image prune -f --filter label=app=decider || true
        
    - name: Show final status
      run: |
        echo "=== 🎯 FINAL DEPLOYMENT STATUS ==="
        echo "🎉 ALL GIBBS-APPS DEPLOYED! 🎉"
        echo ""
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(ctaaapi|projector-ui|morning-chats|accountability-discord|decider)" || docker ps
        echo ""
        echo "🌟 Your Complete Personal App Ecosystem:"
        echo "  🔗 CTAAAPI: http://localhost:3001 (API Backend)"
        echo "  📱 Projector UI: http://localhost:3000 (React Frontend)"
        echo "  🎙️  Morning Chats: http://localhost:3002 (Voice Coaching)"
        echo "  🤖 Discord Bot: http://localhost:3004 (Accountability Coach)"
        echo "  🧠 Decider: http://localhost:3005 (Decision Engine)"
        echo ""
        echo "🔄 Network: gibbs-apps"
        docker network inspect gibbs-apps --format='{{range .Containers}}  📦 {{.Name}}: {{.IPv4Address}}{{"\n"}}{{end}}'
        echo ""
        echo "🎯 MISSION ACCOMPLISHED! 🎯"